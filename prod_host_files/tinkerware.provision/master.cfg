# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989 }}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import pb
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git@github.com:Tinker-Ware/landing-page.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
            'git@github.com:Tinker-Ware/website_old.git',
            workdir='gitpoller-workdir-demo', branch='master',
            pollinterval=300))

c['change_source'].append(pb.PBChangeSource(port=9999, user='example-user', passwd='pass'))
c['change_source'].append(pb.PBChangeSource(port=9997, user='example-user', passwd='pass'))
####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["landing-cd", "demo-cd"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

c['schedulers'].append(SingleBranchScheduler(
                                    name="waiter",
                                    change_filter=filter.ChangeFilter(category='provision'),
                                    builderNames=["runtests"]))

c['schedulers'].append(SingleBranchScheduler(
                                    name="waiter_vagrant",
                                    change_filter=filter.ChangeFilter(category='generate'),
                                    builderNames=["vagrant-generate-builder"]))

c['schedulers'].append(SingleBranchScheduler(
                                    name="sched_redeploy",
                                    change_filter=filter.ChangeFilter(category='redeploy'),
                                    builderNames=["redeploy"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property

factory = BuildFactory()
factory.addStep(Git(repourl='git@github.com:thetonymaster/reptilian_brain.git',
                    mode='full',
                    workdir='tinker',
                    branch='master',
                    submodules=True,
                    clobberOnFailure=True))
factory.addStep(ShellCommand(command=["/home/tinkerware/go/bin/cerebro",
                                      "--project", Property('provision_json'),
                                      "--host", Property('host'),
                                      "--user_token", Property('usertoken'),
                                      "--ansible_directory", Property('ansibledirectory'),
                                      "--vault_password", Property('vaultpassword'),
                                      "provision"]))

landing_factory = BuildFactory()
landing_factory.addStep(ShellCommand(command=["ansible-playbook",
                                              "provisioning/tinkerware.yml",
                                              "--limit=tinkerware.web",
                                              "-i", "provisioning/hosts",
                                              "-u", "root",
                                              "--tags=landing"],
                                     workdir="/home/tinkerware/infrastructure"))

demo_factory = BuildFactory()
demo_factory.addStep(ShellCommand(command=["ansible-playbook",
                                           "provisioning/tinkerware.yml",
                                           "--limit=tinkerware.web",
                                           "-i", "provisioning/hosts",
                                           "-u", "root",
                                           "--tags=demo"],
                                  workdir="/home/tinkerware/infrastructure"))


vagrant_generate_factory = BuildFactory()
vagrant_generate_factory.addStep(Git(repourl='git@github.com:thetonymaster/reptilian_brain.git',
                    mode='full',
                    workdir='tinker',
                    branch='master',
                    submodules=True,
                    clobberOnFailure=True))
vagrant_generate_factory.addStep(ShellCommand(command=["/home/tinkerware/go/bin/cerebro",
                                                       "--project", Property('provision_json'),
                                                       "--host", Property('host'),
                                                       "--user_token", Property('usertoken'),
                                                       "--ansible_directory", Property('ansibledirectory'),
                                                       "--vault_password", Property('vaultpassword'),
                                                       "generate"]))
redeploy = BuildFactory()
redeploy.addStep(Git(repourl='git@github.com:thetonymaster/reptilian_brain.git',
                    mode='full',
                    workdir='tinker',
                    branch='master',
                    submodules=True,
                    clobberOnFailure=True))
redeploy.addStep(ShellCommand(command=["/home/tinkerware/go/bin/cerebro",
                                                       "--project", Property('provision_json'),
                                                       "--host", Property('host'),
                                                       "--user_token", Property('usertoken'),
                                                       "--ansible_directory", Property('ansibledirectory'),
                                                       "--vault_password", Property('vaultpassword'),
                                                       "refresh"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

c['builders'].append(
    BuilderConfig(name="landing-cd",
      slavenames=["example-slave"],
                  factory=landing_factory))

c['builders'].append(
    BuilderConfig(name="vagrant-generate-builder",
      slavenames=["example-slave"],
                  factory=vagrant_generate_factory))

c['builders'].append(
    BuilderConfig(name="demo-cd",
      slavenames=["example-slave"],
                  factory=demo_factory))

c['builders'].append(
    BuilderConfig(name="redeploy",
      slavenames=["example-slave"],
                  factory=redeploy))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("tinker","tinker4")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
    view = 'auth',
)
c['status'].append(html.WebStatus(http_port=8020, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Tinkerware"
c['titleURL'] = "https://launchpad.net/tinkerware"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.tinkerware.io/buildbot"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
